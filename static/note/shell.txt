shopt命令可以调整 Bash 的行为
    dotglob参数可以让扩展结果包括隐藏文件  shopt -s dotglob
    nocaseglob参数可以让通配符扩展不区分大小写
    globstar参数可以使得**匹配零个或多个子目录
ctrl + l 清空屏幕，ctrl + D 关闭窗口
扩展：
    1. ~ ：家目录
    2. ？：单个字符
    3. *：0-多个字符
    4. []: 其中一个、连续、取反
    5. {start..end..step}
    6. ${}:变量扩展
    7. $() `` 子命令扩展
    8. $(()) 算术扩展

单引号使得 Bash 扩展、变量引用、算术运算和子命令，都失效
    echo 'it\'s' --不正确
    echo $'it\'s' --正确
大部分特殊字符在双引号里面，都会失去特殊含义,三个特殊字符除外    ( $、`、\ )

Here 文档也不能作为变量的值，只能用于命令的参数
    command << token
      string
    token

    等同于
    echo string | command

Here 字符串
     cat <<< 'hi there'
     等同于
     echo 'hi there' | cat

PS1：Shell 提示符

自定义变量是用户在当前 Shell 里面自己定义的变量，仅在当前 Shell 可用。一旦退出当前 Shell，该变量就不存在
如果变量的值本身也是变量，可以使用${!varname}的语法，读取最终的值  test=USER;echo ${!test}
如果变量值包含连续空格（或制表符和换行符），最好放在双引号里面读取,可以保持原来的格式 t="1 2  3";echo "$t"
export命令用来向子 Shell 输出变量，子shell 对环境变量进行操作不会影响父shell ，bash 进入子 shell
    $?为上一个命令的退出码，用来判断上一个命令是否执行成功。返回值是0，表示上一个命令执行成功；如果不是零，表示上一个命令执行失败
    $$为当前 Shell 的进程 ID
    $_为上一个命令的最后一个参数
    $!为最近一个后台执行的异步命令的进程 ID
    $0为当前 Shell 的名称（在命令行直接执行时）或者脚本名（在脚本中执行时）
    $-为当前 Shell 的启动参数
    $#表示脚本的参数数量，$@表示脚本的参数值

变量的默认值（这里只记录一种）
    ${varname:=word}
    如果变量varname存在且不为空，则返回它的值，否则将它设为word，并且返回word。它的目的是设置变量的默认值

let i=1+2
readonly i  相当于 declare -r i="3"

${variable##pattern} 贪婪模式            echo ${myPath##*/}  只取文件名
${variable#pattern}  非贪婪
${variable/#pattern/string} 替换


set -u 遇到不存在的变量报错
set -e 脚本只要发生错误，就终止执行
set -x用来在运行结果之前，先输出执行的那一行命令
set -o noclobber：防止使用重定向运算符>覆盖已经存在的文件
command || { echo "command failed"; exit 1; }    command有非零返回值，脚本就会停止执行

set -Eeuxo pipefail   or   bash -euxo pipefail script.sh

LINENO 变量LINENO返回它在脚本里面的行号
FUNCNAME 该数组的0号成员是当前调用的函数
BASH_SOURCE 该数组的0号成员是当前执行的脚本，1号成员是调用当前脚本的脚本

trap 'rm -f "$TMPFILE"' EXIT   指定退出时的清除操作
TMPFILE=$(mktemp) || exit 1   为安全创建临时文件
trap命令用来在 Bash 脚本中响应系统信号
trap命令必须放在脚本的开头。否则，它上方的任何命令导致脚本退出，都不会被它捕获
trap需要触发多条命令，可以封装一个 Bash 函数



Linux 发行版更新的时候，会更新/etc里面的文件，比如/etc/profile，因此不要直接修改这个文件。如果想修改所有用户的登陆环境，就在/etc/profile.d目录里面新建.sh脚本。
非登录 Session 是用户进入系统以后，手动新建的 Session，这时不会进行环境初始化。比如，在命令行执行bash命令，就会新建一个非登录 Session
如果想修改你个人的登录环境，一般是写在~/.bash_profile里面
对用户来说，~/.bashrc通常是最重要的脚本。非登录 Session 默认会执行它，而登录 Session 一般也会通过调用执行它。每次新建一个 Bash 窗口，就相当于新建一个非登录 Session，所以~/.bashrc每次都会执行。注意，执行脚本相当于新建一个非互动的 Bash 环境，但是这种情况不会调用~/.bashrc
 bash --login  会强制执行登录 Session 会执行的脚本
 bash --norc ~/.bash_logout脚本在每次退出 Session 时执行，通常用来做一些清理工作和记录工作，比如删除临时文件，记录用户在本次 Session 花费的时间
 ~/.bash_logout脚本在每次退出 Session 时执行，通常用来做一些清理工作和记录工作，比如删除临时文件，记录用户在本次 Session 花费的时间

为了方便 Debug，有时在启动 Bash 的时候，可以加上启动参数。


-n：不运行脚本，只检查是否有语法错误。
-v：输出每一行语句运行结果前，会先输出该行语句。
-x：每一个命令处理之前，先输出该命令，再执行该命令


Linux命令输入换行，第二行显示的提示符就是PS2
PS3是使用select命令时，系统输入菜单的提示符
PS4默认为+。它是使用 Bash 的-x参数执行脚本时，每一行命令在执行前都会先打印出来，并且在行首出现的那个提示符


export PS1='\033[1;35m[\D{%Y%m%d_%H%M%S}]\[\033[00m\]\[\033[01;32m\]$USER@\[\033[01;34m\]$HOSTNAME\[\033[00m\]:\033[1;35m$PWD\[\033[00m\]\n$'



函数（function）是可以重复使用的代码片段，有利于代码的复用。它与别名（alias）的区别是，别名只适合封装简单的单个命令，函数则可以封装复杂的多行命令
函数总是在当前 Shell 执行，这是跟脚本的一个重大区别，Bash 会新建一个子 Shell 执行脚本。如果函数与脚本同名，函数会优先执行。但是，函数的优先级不如别名，即如果函数与别名同名，那么别名优先执行
unset -f functionNam  删除一个函数
declare -f 查看当前 Shell 已经定义的所有函数
declare -f functionName
declare -F可以输出所有已经定义的函数名，不含函数体


函数里面可以用local命令声明局部变量

函数体内可以使用参数变量，获取函数参数
    $1~$9：函数的第一个到第9个的参数。
    $0：函数所在的脚本名。
    $#：函数的参数总数。
    $@：函数的全部参数，参数之间使用空格分隔。
    $*：函数的全部参数，参数之间使用变量$IFS值的第一个字符分隔，默认为空格，但是可以自定义
如果函数的参数多于9个，那么第10个参数可以用${10}的形式引用